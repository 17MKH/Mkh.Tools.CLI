// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 17.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Mkh.Tools.CLI.Templates.Default.src.WebHost
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\MyProject\MKH\Mkh.Tools.CLI\src\Mkh.Tools.CLI\Templates\Default\src\WebHost\Appsettings.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class Appsettings : AppsettingsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("{\r\n  //主机配置\r\n  \"Host\": {\r\n    //绑定URL\r\n    \"Urls\": \"http://*:");
            
            #line 6 "D:\MyProject\MKH\Mkh.Tools.CLI\src\Mkh.Tools.CLI\Templates\Default\src\WebHost\Appsettings.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_model.Module.No + 6220));
            
            #line default
            #line hidden
            this.Write("\",\r\n    //wwwroot目录下开放的目录列表\r\n    \"OpenDirs\": [\"web\"],\r\n    //目录目录\r\n    \"DefaultDi" +
                    "r\": \"web\"\r\n  },\r\n  //Serilog日志配置\r\n  \"Serilog\": {\r\n    \"MinimumLevel\": {\r\n      \"" +
                    "Default\": \"Error\",\r\n      \"Override\": {\r\n        \"Microsoft\": \"Error\",\r\n        " +
                    "\"System\": \"Error\"\r\n      }\r\n    },\r\n    \"WriteTo\": [\r\n      //输出到文件\r\n      {\r\n  " +
                    "      \"Name\": \"File\",\r\n        \"Args\": {\r\n          //文件路径\r\n          \"path\": \"l" +
                    "og/log.log\",\r\n          //文件滚动方式\r\n          \"rollingInterval\": \"Day\",\r\n         " +
                    " //消息输出格式\r\n          \"outputTemplate\": \"{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} " +
                    "[{Level:u3}] {Message:lj}{NewLine}{Exception}\",\r\n          //文件数量\r\n          \"re" +
                    "tainedFileCountLimit\": 60,\r\n          //使用缓冲，提高写入效率\r\n          \"buffered\": false" +
                    "\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  //MKH框架本身的配置，完整配置可参考https://github.com/17MK" +
                    "H/Mkh/blob/main/modules/WebHost/appsettings.json\r\n  \"Mkh\": {\r\n    //通用配置\r\n    \"C" +
                    "ommon\": {\r\n      //临时文件目录，默认应用程序根目录中的Temp目录\r\n      \"TempDir\": \"\",\r\n      //默认语言\r" +
                    "\n      \"Lang\": \"zh\", \r\n      //数据库配置\r\n      \"Db\": {\r\n        //数据库类型，0：SqlServer" +
                    " 1：MySql 2：Sqlite  3：PostgreSQL  4：Oracle\r\n        \"Provider\": 2,\r\n        //数据库" +
                    "连接字符串\r\n        \"ConnectionString\": \"\",\r\n        //开启日志\r\n        \"Log\": true,\r\n  " +
                    "      //启用代码优先模式\r\n        \"CodeFirst\": true,\r\n        //自动创建数据库\r\n        \"Create" +
                    "Database\": true,\r\n        //自动更新列信息\r\n        \"UpdateColumn\": true,\r\n        //创建" +
                    "数据库后初始化数据\r\n        \"InitData\": true\r\n      }\r\n    },\r\n    //模块列表\r\n    \"Modules\":" +
                    " {\r\n      \"Admin\": {\r\n        \"Config\": {\r\n          //创建账户时默认密码\r\n          \"Def" +
                    "aultPassword\": \"123456789\"\r\n        }\r\n      },\r\n      \"");
            
            #line 74 "D:\MyProject\MKH\Mkh.Tools.CLI\src\Mkh.Tools.CLI\Templates\Default\src\WebHost\Appsettings.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_model.Module.Code));
            
            #line default
            #line hidden
            this.Write(@""": {
      }
    },
    //身份认证与授权配置项
    ""Auth"": {
      //启用权限验证(生产环境慎重关闭)
      ""EnablePermissionVerify"": true,
      //启用验证码功能
      ""EnableVerifyCode"": false,
      //启用审计日志
      ""EnableAuditLog"": true,
      //启用检测IP地址功能
      ""EnableCheckIP"": true,
      //对登录凭证进行加密
      ""EncryptCert"": true,
      //Jwt配置
      ""Jwt"": {
        //密钥
        ""Key"": """);
            
            #line 92 "D:\MyProject\MKH\Mkh.Tools.CLI\src\Mkh.Tools.CLI\Templates\Default\src\WebHost\Appsettings.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_model.JwtKey));
            
            #line default
            #line hidden
            this.Write(@""",
        //发行人
        ""Issuer"": ""http://127.0.0.1:6220"",
        //消费者
        ""Audience"": ""http://127.0.0.1:6220"",
        //令牌有效期，单位分钟，(默认120)
        ""Expires"": 120,
        //刷新令牌有效期(单位：天，默认7)
        ""RefreshTokenExpires"": 7
      }
    },
    //缓存配置
    ""Cache"": {
      //缓存提供器，0、MemoryCache 1、Redis
      ""Provider"": 0,
      //Redis配置
      ""Redis"": {
        //默认数据库
        ""DefaultDb"": 0,
        //缓存键前缀
        ""KeyPrefix"": """",
        //链接字符串
        ""ConnectionString"": """"
      }
    }
  }
}

");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class AppsettingsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
